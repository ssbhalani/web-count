{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'le ore',\n  minutes: 'i minuti',\n  seconds: 'i secondi'\n};\nconst itITPickers = {\n  // Calendar navigation\n  previousMonth: 'Mese precedente',\n  nextMonth: 'Mese successivo',\n  // View navigation\n  openPreviousView: 'apri la vista precedente',\n  openNextView: 'apri la vista successiva',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? \"la vista dell'anno è aperta, passare alla vista del calendario\" : \"la vista dell'calendario è aperta, passare alla vista dell'anno\",\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? \"la vista del campo di testo \\xE8 aperta, passare alla vista \".concat(viewType) : \"la vista aperta \\xE8: \".concat(viewType, \", vai alla vista del campo di testo\"),\n  // DateRange placeholders\n  start: 'Inizio',\n  end: 'Fine',\n  // Action bar\n  cancelButtonLabel: 'Cancellare',\n  clearButtonLabel: 'Sgomberare',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Oggi',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Seleziona data',\n  dateTimePickerDefaultToolbarTitle: 'Seleziona data e orario',\n  timePickerDefaultToolbarTitle: 'Seleziona orario',\n  dateRangePickerDefaultToolbarTitle: 'Seleziona intervallo di date',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => \"Seleziona \".concat(views[view], \". \").concat(time === null ? 'Nessun orario selezionato' : \"L'ora selezionata \\xE8 \".concat(adapter.format(time, 'fullTime'))),\n  hoursClockNumberText: hours => \"\".concat(hours, \" ore\"),\n  minutesClockNumberText: minutes => \"\".concat(minutes, \" minuti\"),\n  secondsClockNumberText: seconds => \"\".concat(seconds, \" secondi\"),\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Scegli la data, la data selezionata \\xE8 \".concat(utils.format(utils.date(rawValue), 'fullDate')) : 'Scegli la data',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Scegli l'ora, l'ora selezionata \\xE8 \".concat(utils.format(utils.date(rawValue), 'fullTime')) : \"Scegli l'ora\",\n  // Table labels\n  timeTableLabel: \"scegli un'ora\",\n  dateTableLabel: 'scegli una data'\n};\nexport const itIT = getPickersLocalization(itITPickers);","map":{"version":3,"names":["getPickersLocalization","views","hours","minutes","seconds","itITPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","inputModeToggleButtonAriaLabel","isKeyboardInputOpen","viewType","concat","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","datePickerDefaultToolbarTitle","dateTimePickerDefaultToolbarTitle","timePickerDefaultToolbarTitle","dateRangePickerDefaultToolbarTitle","clockLabelText","time","adapter","format","hoursClockNumberText","minutesClockNumberText","secondsClockNumberText","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","itIT"],"sources":["/var/www/html/Work/counts/web-count/node_modules/@mui/x-date-pickers/locales/itIT.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'le ore',\n  minutes: 'i minuti',\n  seconds: 'i secondi'\n};\nconst itITPickers = {\n  // Calendar navigation\n  previousMonth: 'Mese precedente',\n  nextMonth: 'Mese successivo',\n  // View navigation\n  openPreviousView: 'apri la vista precedente',\n  openNextView: 'apri la vista successiva',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? \"la vista dell'anno è aperta, passare alla vista del calendario\" : \"la vista dell'calendario è aperta, passare alla vista dell'anno\",\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `la vista del campo di testo è aperta, passare alla vista ${viewType}` : `la vista aperta è: ${viewType}, vai alla vista del campo di testo`,\n  // DateRange placeholders\n  start: 'Inizio',\n  end: 'Fine',\n  // Action bar\n  cancelButtonLabel: 'Cancellare',\n  clearButtonLabel: 'Sgomberare',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Oggi',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Seleziona data',\n  dateTimePickerDefaultToolbarTitle: 'Seleziona data e orario',\n  timePickerDefaultToolbarTitle: 'Seleziona orario',\n  dateRangePickerDefaultToolbarTitle: 'Seleziona intervallo di date',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Seleziona ${views[view]}. ${time === null ? 'Nessun orario selezionato' : `L'ora selezionata è ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} ore`,\n  minutesClockNumberText: minutes => `${minutes} minuti`,\n  secondsClockNumberText: seconds => `${seconds} secondi`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Scegli la data, la data selezionata è ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Scegli la data',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Scegli l'ora, l'ora selezionata è ${utils.format(utils.date(rawValue), 'fullTime')}` : \"Scegli l'ora\",\n  // Table labels\n  timeTableLabel: \"scegli un'ora\",\n  dateTableLabel: 'scegli una data'\n};\nexport const itIT = getPickersLocalization(itITPickers);"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,gCAAgC;AACvE,MAAMC,KAAK,GAAG;EACZC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,UAAU;EACnBC,OAAO,EAAE;AACX,CAAC;AACD,MAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,iBAAiB;EAChCC,SAAS,EAAE,iBAAiB;EAC5B;EACAC,gBAAgB,EAAE,0BAA0B;EAC5CC,YAAY,EAAE,0BAA0B;EACxCC,oCAAoC,EAAEC,IAAI,IAAIA,IAAI,KAAK,MAAM,GAAG,gEAAgE,GAAG,iEAAiE;EACpMC,8BAA8B,EAAEA,CAACC,mBAAmB,EAAEC,QAAQ,KAAKD,mBAAmB,kEAAAE,MAAA,CAA+DD,QAAQ,6BAAAC,MAAA,CAA2BD,QAAQ,wCAAqC;EACrO;EACAE,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,MAAM;EACX;EACAC,iBAAiB,EAAE,YAAY;EAC/BC,gBAAgB,EAAE,YAAY;EAC9BC,aAAa,EAAE,IAAI;EACnBC,gBAAgB,EAAE,MAAM;EACxB;EACAC,6BAA6B,EAAE,gBAAgB;EAC/CC,iCAAiC,EAAE,yBAAyB;EAC5DC,6BAA6B,EAAE,kBAAkB;EACjDC,kCAAkC,EAAE,8BAA8B;EAClE;EACAC,cAAc,EAAEA,CAACf,IAAI,EAAEgB,IAAI,EAAEC,OAAO,kBAAAb,MAAA,CAAkBd,KAAK,CAACU,IAAI,CAAC,QAAAI,MAAA,CAAKY,IAAI,KAAK,IAAI,GAAG,2BAA2B,6BAAAZ,MAAA,CAA0Ba,OAAO,CAACC,MAAM,CAACF,IAAI,EAAE,UAAU,CAAC,CAAE,CAAE;EAC/KG,oBAAoB,EAAE5B,KAAK,OAAAa,MAAA,CAAOb,KAAK,SAAM;EAC7C6B,sBAAsB,EAAE5B,OAAO,OAAAY,MAAA,CAAOZ,OAAO,YAAS;EACtD6B,sBAAsB,EAAE5B,OAAO,OAAAW,MAAA,CAAOX,OAAO,aAAU;EACvD;EACA6B,sBAAsB,EAAEA,CAACC,QAAQ,EAAEC,KAAK,KAAKD,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,CAAC,+CAAAnB,MAAA,CAA4CoB,KAAK,CAACN,MAAM,CAACM,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,EAAE,UAAU,CAAC,IAAK,gBAAgB;EAC3MI,sBAAsB,EAAEA,CAACJ,QAAQ,EAAEC,KAAK,KAAKD,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,CAAC,2CAAAnB,MAAA,CAAwCoB,KAAK,CAACN,MAAM,CAACM,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,EAAE,UAAU,CAAC,IAAK,cAAc;EACrM;EACAK,cAAc,EAAE,eAAe;EAC/BC,cAAc,EAAE;AAClB,CAAC;AACD,OAAO,MAAMC,IAAI,GAAGzC,sBAAsB,CAACK,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}