{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization'; // Translation map for Clock Label\n\nconst timeViews = {\n  hours: 'часы',\n  minutes: 'минуты',\n  seconds: 'секунды'\n}; // maps PickersToolbar[\"viewType\"] to its translation\n\nconst viewTypes = {\n  calendar: 'календарный',\n  clock: 'часовой'\n};\nconst ruRUPickers = {\n  // Calendar navigation\n  previousMonth: 'Предыдущий месяц',\n  nextMonth: 'Следующий месяц',\n  // View navigation\n  openPreviousView: 'открыть предыдущий вид',\n  openNextView: 'открыть следующий вид',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'открыт годовой вид, переключить на календарный вид' : 'открыт календарный вид, переключить на годовой вид',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? \"\\u041E\\u0442\\u043A\\u0440\\u044B\\u0442 \\u0442\\u0435\\u043A\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u0432\\u0438\\u0434, \\u043F\\u0435\\u0440\\u0435\\u0439\\u0442\\u0438 \\u043D\\u0430 \".concat(viewTypes[viewType], \" \\u0432\\u0438\\u0434\") : \"\\u041E\\u0442\\u043A\\u0440\\u044B\\u0442 \".concat(viewTypes[viewType], \" \\u0432\\u0438\\u0434, \\u043F\\u0435\\u0440\\u0435\\u0439\\u0442\\u0438 \\u043D\\u0430 \\u0442\\u0435\\u043A\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u0432\\u0438\\u0434\"),\n  // DateRange placeholders\n  start: 'Начало',\n  end: 'Конец',\n  // Action bar\n  cancelButtonLabel: 'Отмена',\n  clearButtonLabel: 'Очистить',\n  okButtonLabel: 'Ок',\n  todayButtonLabel: 'Сегодня',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Выбрать дату',\n  dateTimePickerDefaultToolbarTitle: 'Выбрать дату и время',\n  timePickerDefaultToolbarTitle: 'Выбрать время',\n  dateRangePickerDefaultToolbarTitle: 'Выбрать период',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \".concat(timeViews[view], \". \").concat(time === null ? 'Время не выбрано' : \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u043D\\u043E \\u0432\\u0440\\u0435\\u043C\\u044F \".concat(adapter.format(time, 'fullTime'))),\n  hoursClockNumberText: hours => \"\".concat(hours, \" \\u0447\\u0430\\u0441\\u043E\\u0432\"),\n  minutesClockNumberText: minutes => \"\".concat(minutes, \" \\u043C\\u0438\\u043D\\u0443\\u0442\"),\n  secondsClockNumberText: seconds => \"\".concat(seconds, \" \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\"),\n  // Open picker labels\n  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0434\\u0430\\u0442\\u0443, \\u0432\\u044B\\u0431\\u0440\\u0430\\u043D\\u0430 \\u0434\\u0430\\u0442\\u0430 \".concat(utils.format(value, 'fullDate')) : 'Выберите дату',\n  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0432\\u0440\\u0435\\u043C\\u044F, \\u0432\\u044B\\u0431\\u0440\\u0430\\u043D\\u043E \\u0432\\u0440\\u0435\\u043C\\u044F \".concat(utils.format(value, 'fullTime')) : 'Выберите время',\n  // Table labels\n  timeTableLabel: 'выбрать время',\n  dateTableLabel: 'выбрать дату'\n};\nexport const ruRU = getPickersLocalization(ruRUPickers);","map":{"version":3,"names":["getPickersLocalization","timeViews","hours","minutes","seconds","viewTypes","calendar","clock","ruRUPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","inputModeToggleButtonAriaLabel","isKeyboardInputOpen","viewType","concat","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","datePickerDefaultToolbarTitle","dateTimePickerDefaultToolbarTitle","timePickerDefaultToolbarTitle","dateRangePickerDefaultToolbarTitle","clockLabelText","time","adapter","format","hoursClockNumberText","minutesClockNumberText","secondsClockNumberText","openDatePickerDialogue","value","utils","isValid","openTimePickerDialogue","timeTableLabel","dateTableLabel","ruRU"],"sources":["/var/www/html/Work/counts/web-count/node_modules/@mui/x-date-pickers/locales/ruRU.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization'; // Translation map for Clock Label\n\nconst timeViews = {\n  hours: 'часы',\n  minutes: 'минуты',\n  seconds: 'секунды'\n}; // maps PickersToolbar[\"viewType\"] to its translation\n\nconst viewTypes = {\n  calendar: 'календарный',\n  clock: 'часовой'\n};\nconst ruRUPickers = {\n  // Calendar navigation\n  previousMonth: 'Предыдущий месяц',\n  nextMonth: 'Следующий месяц',\n  // View navigation\n  openPreviousView: 'открыть предыдущий вид',\n  openNextView: 'открыть следующий вид',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'открыт годовой вид, переключить на календарный вид' : 'открыт календарный вид, переключить на годовой вид',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `Открыт текстовый вид, перейти на ${viewTypes[viewType]} вид` : `Открыт ${viewTypes[viewType]} вид, перейти на текстовый вид`,\n  // DateRange placeholders\n  start: 'Начало',\n  end: 'Конец',\n  // Action bar\n  cancelButtonLabel: 'Отмена',\n  clearButtonLabel: 'Очистить',\n  okButtonLabel: 'Ок',\n  todayButtonLabel: 'Сегодня',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Выбрать дату',\n  dateTimePickerDefaultToolbarTitle: 'Выбрать дату и время',\n  timePickerDefaultToolbarTitle: 'Выбрать время',\n  dateRangePickerDefaultToolbarTitle: 'Выбрать период',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Выбрать ${timeViews[view]}. ${time === null ? 'Время не выбрано' : `Выбрано время ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} часов`,\n  minutesClockNumberText: minutes => `${minutes} минут`,\n  secondsClockNumberText: seconds => `${seconds} секунд`,\n  // Open picker labels\n  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Выберите дату, выбрана дата ${utils.format(value, 'fullDate')}` : 'Выберите дату',\n  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Выберите время, выбрано время ${utils.format(value, 'fullTime')}` : 'Выберите время',\n  // Table labels\n  timeTableLabel: 'выбрать время',\n  dateTableLabel: 'выбрать дату'\n};\nexport const ruRU = getPickersLocalization(ruRUPickers);"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,gCAAgC,CAAC,CAAC;;AAEzE,MAAMC,SAAS,GAAG;EAChBC,KAAK,EAAE,MAAM;EACbC,OAAO,EAAE,QAAQ;EACjBC,OAAO,EAAE;AACX,CAAC,CAAC,CAAC;;AAEH,MAAMC,SAAS,GAAG;EAChBC,QAAQ,EAAE,aAAa;EACvBC,KAAK,EAAE;AACT,CAAC;AACD,MAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,kBAAkB;EACjCC,SAAS,EAAE,iBAAiB;EAC5B;EACAC,gBAAgB,EAAE,wBAAwB;EAC1CC,YAAY,EAAE,uBAAuB;EACrCC,oCAAoC,EAAEC,IAAI,IAAIA,IAAI,KAAK,MAAM,GAAG,oDAAoD,GAAG,oDAAoD;EAC3KC,8BAA8B,EAAEA,CAACC,mBAAmB,EAAEC,QAAQ,KAAKD,mBAAmB,8KAAAE,MAAA,CAAuCb,SAAS,CAACY,QAAQ,CAAC,mEAAAC,MAAA,CAAmBb,SAAS,CAACY,QAAQ,CAAC,2JAAgC;EACtN;EACAE,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,OAAO;EACZ;EACAC,iBAAiB,EAAE,QAAQ;EAC3BC,gBAAgB,EAAE,UAAU;EAC5BC,aAAa,EAAE,IAAI;EACnBC,gBAAgB,EAAE,SAAS;EAC3B;EACAC,6BAA6B,EAAE,cAAc;EAC7CC,iCAAiC,EAAE,sBAAsB;EACzDC,6BAA6B,EAAE,eAAe;EAC9CC,kCAAkC,EAAE,gBAAgB;EACpD;EACAC,cAAc,EAAEA,CAACf,IAAI,EAAEgB,IAAI,EAAEC,OAAO,mDAAAb,MAAA,CAAgBjB,SAAS,CAACa,IAAI,CAAC,QAAAI,MAAA,CAAKY,IAAI,KAAK,IAAI,GAAG,kBAAkB,gFAAAZ,MAAA,CAAoBa,OAAO,CAACC,MAAM,CAACF,IAAI,EAAE,UAAU,CAAC,CAAE,CAAE;EAClKG,oBAAoB,EAAE/B,KAAK,OAAAgB,MAAA,CAAOhB,KAAK,oCAAQ;EAC/CgC,sBAAsB,EAAE/B,OAAO,OAAAe,MAAA,CAAOf,OAAO,oCAAQ;EACrDgC,sBAAsB,EAAE/B,OAAO,OAAAc,MAAA,CAAOd,OAAO,0CAAS;EACtD;EACAgC,sBAAsB,EAAEA,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,KAAK,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,qJAAAnB,MAAA,CAAkCoB,KAAK,CAACN,MAAM,CAACK,KAAK,EAAE,UAAU,CAAC,IAAK,eAAe;EACrKG,sBAAsB,EAAEA,CAACH,KAAK,EAAEC,KAAK,KAAKD,KAAK,KAAK,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,iKAAAnB,MAAA,CAAoCoB,KAAK,CAACN,MAAM,CAACK,KAAK,EAAE,UAAU,CAAC,IAAK,gBAAgB;EACxK;EACAI,cAAc,EAAE,eAAe;EAC/BC,cAAc,EAAE;AAClB,CAAC;AACD,OAAO,MAAMC,IAAI,GAAG3C,sBAAsB,CAACQ,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}