{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization'; // maps ClockPickerView to its translation\n\nconst clockViews = {\n  hours: 'Stunden',\n  minutes: 'Minuten',\n  seconds: 'Sekunden'\n}; // maps PickersToolbar[\"viewType\"] to its translation\n\nconst pickerViews = {\n  calendar: 'Kalenderansicht',\n  clock: 'Uhransicht'\n};\nconst deDEPickers = {\n  // Calendar navigation\n  previousMonth: 'Letzter Monat',\n  nextMonth: 'Nächster Monat',\n  // View navigation\n  openPreviousView: 'Letzte Ansicht öffnen',\n  openNextView: 'Nächste Ansicht öffnen',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'Jahresansicht ist geöffnet, zur Kalenderansicht wechseln' : 'Kalenderansicht ist geöffnet, zur Jahresansicht wechseln',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? \"Texteingabeansicht ist ge\\xF6ffnet, zur \".concat(pickerViews[viewType], \" wechseln\") : \"\".concat(pickerViews[viewType], \" ist ge\\xF6ffnet, zur Texteingabeansicht wechseln\"),\n  // DateRange placeholders\n  start: 'Beginn',\n  end: 'Ende',\n  // Action bar\n  cancelButtonLabel: 'Abbrechen',\n  clearButtonLabel: 'Löschen',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Heute',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Datum auswählen',\n  dateTimePickerDefaultToolbarTitle: 'Datum & Uhrzeit auswählen',\n  timePickerDefaultToolbarTitle: 'Uhrzeit auswählen',\n  dateRangePickerDefaultToolbarTitle: 'Datumsbereich auswählen',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => {\n    var _clockViews$view;\n    return \"\".concat((_clockViews$view = clockViews[view]) != null ? _clockViews$view : view, \" ausw\\xE4hlen. \").concat(time === null ? 'Keine Uhrzeit ausgewählt' : \"Gew\\xE4hlte Uhrzeit ist \".concat(adapter.format(time, 'fullTime')));\n  },\n  hoursClockNumberText: hours => \"\".concat(hours, \" \").concat(clockViews.hours),\n  minutesClockNumberText: minutes => \"\".concat(minutes, \" \").concat(clockViews.minutes),\n  secondsClockNumberText: seconds => \"\".concat(seconds, \"  \").concat(clockViews.seconds),\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Datum ausw\\xE4hlen, gew\\xE4hltes Datum ist \".concat(utils.format(utils.date(rawValue), 'fullDate')) : 'Datum auswählen',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Uhrzeit ausw\\xE4hlen, gew\\xE4hlte Uhrzeit ist \".concat(utils.format(utils.date(rawValue), 'fullTime')) : 'Uhrzeit auswählen',\n  // Table labels\n  timeTableLabel: 'Uhrzeit auswählen',\n  dateTableLabel: 'Datum auswählen'\n};\nexport const deDE = getPickersLocalization(deDEPickers);","map":{"version":3,"names":["getPickersLocalization","clockViews","hours","minutes","seconds","pickerViews","calendar","clock","deDEPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","inputModeToggleButtonAriaLabel","isKeyboardInputOpen","viewType","concat","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","datePickerDefaultToolbarTitle","dateTimePickerDefaultToolbarTitle","timePickerDefaultToolbarTitle","dateRangePickerDefaultToolbarTitle","clockLabelText","time","adapter","_clockViews$view","format","hoursClockNumberText","minutesClockNumberText","secondsClockNumberText","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","deDE"],"sources":["/var/www/html/Work/counts/web-count/node_modules/@mui/x-date-pickers/locales/deDE.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization'; // maps ClockPickerView to its translation\n\nconst clockViews = {\n  hours: 'Stunden',\n  minutes: 'Minuten',\n  seconds: 'Sekunden'\n}; // maps PickersToolbar[\"viewType\"] to its translation\n\nconst pickerViews = {\n  calendar: 'Kalenderansicht',\n  clock: 'Uhransicht'\n};\nconst deDEPickers = {\n  // Calendar navigation\n  previousMonth: 'Letzter Monat',\n  nextMonth: 'Nächster Monat',\n  // View navigation\n  openPreviousView: 'Letzte Ansicht öffnen',\n  openNextView: 'Nächste Ansicht öffnen',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'Jahresansicht ist geöffnet, zur Kalenderansicht wechseln' : 'Kalenderansicht ist geöffnet, zur Jahresansicht wechseln',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `Texteingabeansicht ist geöffnet, zur ${pickerViews[viewType]} wechseln` : `${pickerViews[viewType]} ist geöffnet, zur Texteingabeansicht wechseln`,\n  // DateRange placeholders\n  start: 'Beginn',\n  end: 'Ende',\n  // Action bar\n  cancelButtonLabel: 'Abbrechen',\n  clearButtonLabel: 'Löschen',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Heute',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Datum auswählen',\n  dateTimePickerDefaultToolbarTitle: 'Datum & Uhrzeit auswählen',\n  timePickerDefaultToolbarTitle: 'Uhrzeit auswählen',\n  dateRangePickerDefaultToolbarTitle: 'Datumsbereich auswählen',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => {\n    var _clockViews$view;\n\n    return `${(_clockViews$view = clockViews[view]) != null ? _clockViews$view : view} auswählen. ${time === null ? 'Keine Uhrzeit ausgewählt' : `Gewählte Uhrzeit ist ${adapter.format(time, 'fullTime')}`}`;\n  },\n  hoursClockNumberText: hours => `${hours} ${clockViews.hours}`,\n  minutesClockNumberText: minutes => `${minutes} ${clockViews.minutes}`,\n  secondsClockNumberText: seconds => `${seconds}  ${clockViews.seconds}`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Datum auswählen, gewähltes Datum ist ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Datum auswählen',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Uhrzeit auswählen, gewählte Uhrzeit ist ${utils.format(utils.date(rawValue), 'fullTime')}` : 'Uhrzeit auswählen',\n  // Table labels\n  timeTableLabel: 'Uhrzeit auswählen',\n  dateTableLabel: 'Datum auswählen'\n};\nexport const deDE = getPickersLocalization(deDEPickers);"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,gCAAgC,CAAC,CAAC;;AAEzE,MAAMC,UAAU,GAAG;EACjBC,KAAK,EAAE,SAAS;EAChBC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE;AACX,CAAC,CAAC,CAAC;;AAEH,MAAMC,WAAW,GAAG;EAClBC,QAAQ,EAAE,iBAAiB;EAC3BC,KAAK,EAAE;AACT,CAAC;AACD,MAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,eAAe;EAC9BC,SAAS,EAAE,gBAAgB;EAC3B;EACAC,gBAAgB,EAAE,uBAAuB;EACzCC,YAAY,EAAE,wBAAwB;EACtCC,oCAAoC,EAAEC,IAAI,IAAIA,IAAI,KAAK,MAAM,GAAG,0DAA0D,GAAG,0DAA0D;EACvLC,8BAA8B,EAAEA,CAACC,mBAAmB,EAAEC,QAAQ,KAAKD,mBAAmB,8CAAAE,MAAA,CAA2Cb,WAAW,CAACY,QAAQ,CAAC,oBAAAC,MAAA,CAAiBb,WAAW,CAACY,QAAQ,CAAC,sDAAgD;EAC5O;EACAE,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,MAAM;EACX;EACAC,iBAAiB,EAAE,WAAW;EAC9BC,gBAAgB,EAAE,SAAS;EAC3BC,aAAa,EAAE,IAAI;EACnBC,gBAAgB,EAAE,OAAO;EACzB;EACAC,6BAA6B,EAAE,iBAAiB;EAChDC,iCAAiC,EAAE,2BAA2B;EAC9DC,6BAA6B,EAAE,mBAAmB;EAClDC,kCAAkC,EAAE,yBAAyB;EAC7D;EACAC,cAAc,EAAEA,CAACf,IAAI,EAAEgB,IAAI,EAAEC,OAAO,KAAK;IACvC,IAAIC,gBAAgB;IAEpB,UAAAd,MAAA,CAAU,CAACc,gBAAgB,GAAG/B,UAAU,CAACa,IAAI,CAAC,KAAK,IAAI,GAAGkB,gBAAgB,GAAGlB,IAAI,qBAAAI,MAAA,CAAeY,IAAI,KAAK,IAAI,GAAG,0BAA0B,8BAAAZ,MAAA,CAA2Ba,OAAO,CAACE,MAAM,CAACH,IAAI,EAAE,UAAU,CAAC,CAAE;EACzM,CAAC;EACDI,oBAAoB,EAAEhC,KAAK,OAAAgB,MAAA,CAAOhB,KAAK,OAAAgB,MAAA,CAAIjB,UAAU,CAACC,KAAK,CAAE;EAC7DiC,sBAAsB,EAAEhC,OAAO,OAAAe,MAAA,CAAOf,OAAO,OAAAe,MAAA,CAAIjB,UAAU,CAACE,OAAO,CAAE;EACrEiC,sBAAsB,EAAEhC,OAAO,OAAAc,MAAA,CAAOd,OAAO,QAAAc,MAAA,CAAKjB,UAAU,CAACG,OAAO,CAAE;EACtE;EACAiC,sBAAsB,EAAEA,CAACC,QAAQ,EAAEC,KAAK,KAAKD,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,CAAC,iDAAApB,MAAA,CAA2CqB,KAAK,CAACN,MAAM,CAACM,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,EAAE,UAAU,CAAC,IAAK,iBAAiB;EAC3MI,sBAAsB,EAAEA,CAACJ,QAAQ,EAAEC,KAAK,KAAKD,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,CAAC,oDAAApB,MAAA,CAA8CqB,KAAK,CAACN,MAAM,CAACM,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,EAAE,UAAU,CAAC,IAAK,mBAAmB;EAChN;EACAK,cAAc,EAAE,mBAAmB;EACnCC,cAAc,EAAE;AAClB,CAAC;AACD,OAAO,MAAMC,IAAI,GAAG7C,sBAAsB,CAACQ,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}