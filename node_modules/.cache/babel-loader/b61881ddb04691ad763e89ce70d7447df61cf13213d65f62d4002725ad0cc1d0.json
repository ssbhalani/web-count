{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nconst plPLPickers = {\n  // Calendar navigation\n  previousMonth: 'Poprzedni miesiąc',\n  nextMonth: 'Następny miesiąc',\n  // View navigation\n  openPreviousView: 'otwórz poprzedni widok',\n  openNextView: 'otwórz następny widok',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'otwarty jest widok roku, przełącz na widok kalendarza' : 'otwarty jest widok kalendarza, przełącz na widok roku',\n  // inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,\n  // DateRange placeholders\n  start: 'Początek',\n  end: 'Koniec',\n  // Action bar\n  cancelButtonLabel: 'Anuluj',\n  clearButtonLabel: 'Wyczyść',\n  okButtonLabel: 'Zatwierdź',\n  todayButtonLabel: 'Dzisiaj',\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => \"Select \".concat(view, \". \").concat(time === null ? 'Nie wybrano czasu' : \"Wybrany czas to \".concat(adapter.format(time, 'fullTime'))),\n  hoursClockNumberText: hours => \"\".concat(hours, \" godzin\"),\n  minutesClockNumberText: minutes => \"\".concat(minutes, \" minut\"),\n  secondsClockNumberText: seconds => \"\".concat(seconds, \" sekund\"),\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Wybierz dat\\u0119, obecnie wybrana data to \".concat(utils.format(utils.date(rawValue), 'fullDate')) : 'Wybierz datę',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Wybierz czas, obecnie wybrany czas to \".concat(utils.format(utils.date(rawValue), 'fullTime')) : 'Wybierz czas',\n  // Table labels\n  timeTableLabel: 'wybierz czas',\n  dateTableLabel: 'wybierz datę'\n};\nexport const plPL = getPickersLocalization(plPLPickers);","map":{"version":3,"names":["getPickersLocalization","plPLPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","clockLabelText","time","adapter","concat","format","hoursClockNumberText","hours","minutesClockNumberText","minutes","secondsClockNumberText","seconds","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","plPL"],"sources":["/var/www/html/Work/counts/web-count/node_modules/@mui/x-date-pickers/locales/plPL.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\nconst plPLPickers = {\n  // Calendar navigation\n  previousMonth: 'Poprzedni miesiąc',\n  nextMonth: 'Następny miesiąc',\n  // View navigation\n  openPreviousView: 'otwórz poprzedni widok',\n  openNextView: 'otwórz następny widok',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'otwarty jest widok roku, przełącz na widok kalendarza' : 'otwarty jest widok kalendarza, przełącz na widok roku',\n  // inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,\n  // DateRange placeholders\n  start: 'Początek',\n  end: 'Koniec',\n  // Action bar\n  cancelButtonLabel: 'Anuluj',\n  clearButtonLabel: 'Wyczyść',\n  okButtonLabel: 'Zatwierdź',\n  todayButtonLabel: 'Dzisiaj',\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? 'Nie wybrano czasu' : `Wybrany czas to ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} godzin`,\n  minutesClockNumberText: minutes => `${minutes} minut`,\n  secondsClockNumberText: seconds => `${seconds} sekund`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Wybierz datę, obecnie wybrana data to ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Wybierz datę',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Wybierz czas, obecnie wybrany czas to ${utils.format(utils.date(rawValue), 'fullTime')}` : 'Wybierz czas',\n  // Table labels\n  timeTableLabel: 'wybierz czas',\n  dateTableLabel: 'wybierz datę'\n};\nexport const plPL = getPickersLocalization(plPLPickers);"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,gCAAgC;AACvE,MAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,mBAAmB;EAClCC,SAAS,EAAE,kBAAkB;EAC7B;EACAC,gBAAgB,EAAE,wBAAwB;EAC1CC,YAAY,EAAE,uBAAuB;EACrCC,oCAAoC,EAAEC,IAAI,IAAIA,IAAI,KAAK,MAAM,GAAG,uDAAuD,GAAG,uDAAuD;EACjL;EACA;EACAC,KAAK,EAAE,UAAU;EACjBC,GAAG,EAAE,QAAQ;EACb;EACAC,iBAAiB,EAAE,QAAQ;EAC3BC,gBAAgB,EAAE,SAAS;EAC3BC,aAAa,EAAE,WAAW;EAC1BC,gBAAgB,EAAE,SAAS;EAC3B;EACA;EACA;EACA;EACA;EACA;EACAC,cAAc,EAAEA,CAACP,IAAI,EAAEQ,IAAI,EAAEC,OAAO,eAAAC,MAAA,CAAeV,IAAI,QAAAU,MAAA,CAAKF,IAAI,KAAK,IAAI,GAAG,mBAAmB,sBAAAE,MAAA,CAAsBD,OAAO,CAACE,MAAM,CAACH,IAAI,EAAE,UAAU,CAAC,CAAE,CAAE;EACzJI,oBAAoB,EAAEC,KAAK,OAAAH,MAAA,CAAOG,KAAK,YAAS;EAChDC,sBAAsB,EAAEC,OAAO,OAAAL,MAAA,CAAOK,OAAO,WAAQ;EACrDC,sBAAsB,EAAEC,OAAO,OAAAP,MAAA,CAAOO,OAAO,YAAS;EACtD;EACAC,sBAAsB,EAAEA,CAACC,QAAQ,EAAEC,KAAK,KAAKD,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,CAAC,iDAAAT,MAAA,CAA4CU,KAAK,CAACT,MAAM,CAACS,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,EAAE,UAAU,CAAC,IAAK,cAAc;EACzMI,sBAAsB,EAAEA,CAACJ,QAAQ,EAAEC,KAAK,KAAKD,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,CAAC,4CAAAT,MAAA,CAA4CU,KAAK,CAACT,MAAM,CAACS,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,EAAE,UAAU,CAAC,IAAK,cAAc;EACzM;EACAK,cAAc,EAAE,cAAc;EAC9BC,cAAc,EAAE;AAClB,CAAC;AACD,OAAO,MAAMC,IAAI,GAAGjC,sBAAsB,CAACC,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}