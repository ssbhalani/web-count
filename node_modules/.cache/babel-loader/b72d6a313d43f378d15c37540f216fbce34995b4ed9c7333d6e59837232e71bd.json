{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'heures',\n  minutes: 'minutes',\n  seconds: 'secondes'\n};\nconst viewTranslation = {\n  calendar: 'calendrier',\n  clock: 'horloge'\n};\nconst frFRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mois précédent',\n  nextMonth: 'Mois suivant',\n  // View navigation\n  openPreviousView: 'Ouvrir la vue précédente',\n  openNextView: 'Ouvrir la vue suivante',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'La vue année est ouverte, ouvrir la vue calendrier' : 'La vue calendrier est ouverte, ouvrir la vue année',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? \"passer du champ text au \".concat(viewTranslation[viewType]) : \"passer du \".concat(viewTranslation[viewType], \" au champ text\"),\n  // DateRange placeholders\n  start: 'Début',\n  end: 'Fin',\n  // Action bar\n  cancelButtonLabel: 'Annuler',\n  clearButtonLabel: 'Vider',\n  okButtonLabel: 'OK',\n  todayButtonLabel: \"Aujourd'hui\",\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => \"Choix des \".concat(views[view], \". \").concat(time === null ? 'Aucune heure choisie' : \"L'heure choisie est \".concat(adapter.format(time, 'fullTime'))),\n  hoursClockNumberText: hours => \"\".concat(hours, \" heures\"),\n  minutesClockNumberText: minutes => \"\".concat(minutes, \" minutes\"),\n  secondsClockNumberText: seconds => \"\".concat(seconds, \" secondes\"),\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Choisir la date, la date s\\xE9lectionn\\xE9e est \".concat(utils.format(utils.date(rawValue), 'fullDate')) : 'Choisir la date',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Choisir l'heure, l'heure s\\xE9lectionn\\xE9e est \".concat(utils.format(utils.date(rawValue), 'fullTime')) : \"Choisir l'heure\",\n  // Table labels\n  timeTableLabel: \"choix de l'heure\",\n  dateTableLabel: 'choix de la date'\n};\nexport const frFR = getPickersLocalization(frFRPickers);","map":{"version":3,"names":["getPickersLocalization","views","hours","minutes","seconds","viewTranslation","calendar","clock","frFRPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","inputModeToggleButtonAriaLabel","isKeyboardInputOpen","viewType","concat","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","clockLabelText","time","adapter","format","hoursClockNumberText","minutesClockNumberText","secondsClockNumberText","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","frFR"],"sources":["/var/www/html/Work/counts/web-count/node_modules/@mui/x-date-pickers/locales/frFR.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'heures',\n  minutes: 'minutes',\n  seconds: 'secondes'\n};\nconst viewTranslation = {\n  calendar: 'calendrier',\n  clock: 'horloge'\n};\nconst frFRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mois précédent',\n  nextMonth: 'Mois suivant',\n  // View navigation\n  openPreviousView: 'Ouvrir la vue précédente',\n  openNextView: 'Ouvrir la vue suivante',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'La vue année est ouverte, ouvrir la vue calendrier' : 'La vue calendrier est ouverte, ouvrir la vue année',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `passer du champ text au ${viewTranslation[viewType]}` : `passer du ${viewTranslation[viewType]} au champ text`,\n  // DateRange placeholders\n  start: 'Début',\n  end: 'Fin',\n  // Action bar\n  cancelButtonLabel: 'Annuler',\n  clearButtonLabel: 'Vider',\n  okButtonLabel: 'OK',\n  todayButtonLabel: \"Aujourd'hui\",\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Choix des ${views[view]}. ${time === null ? 'Aucune heure choisie' : `L'heure choisie est ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} heures`,\n  minutesClockNumberText: minutes => `${minutes} minutes`,\n  secondsClockNumberText: seconds => `${seconds} secondes`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir la date, la date sélectionnée est ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Choisir la date',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir l'heure, l'heure sélectionnée est ${utils.format(utils.date(rawValue), 'fullTime')}` : \"Choisir l'heure\",\n  // Table labels\n  timeTableLabel: \"choix de l'heure\",\n  dateTableLabel: 'choix de la date'\n};\nexport const frFR = getPickersLocalization(frFRPickers);"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,gCAAgC;AACvE,MAAMC,KAAK,GAAG;EACZC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE;AACX,CAAC;AACD,MAAMC,eAAe,GAAG;EACtBC,QAAQ,EAAE,YAAY;EACtBC,KAAK,EAAE;AACT,CAAC;AACD,MAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,gBAAgB;EAC/BC,SAAS,EAAE,cAAc;EACzB;EACAC,gBAAgB,EAAE,0BAA0B;EAC5CC,YAAY,EAAE,wBAAwB;EACtCC,oCAAoC,EAAEC,IAAI,IAAIA,IAAI,KAAK,MAAM,GAAG,oDAAoD,GAAG,oDAAoD;EAC3KC,8BAA8B,EAAEA,CAACC,mBAAmB,EAAEC,QAAQ,KAAKD,mBAAmB,8BAAAE,MAAA,CAA8Bb,eAAe,CAACY,QAAQ,CAAC,iBAAAC,MAAA,CAAkBb,eAAe,CAACY,QAAQ,CAAC,mBAAgB;EACxM;EACAE,KAAK,EAAE,OAAO;EACdC,GAAG,EAAE,KAAK;EACV;EACAC,iBAAiB,EAAE,SAAS;EAC5BC,gBAAgB,EAAE,OAAO;EACzBC,aAAa,EAAE,IAAI;EACnBC,gBAAgB,EAAE,aAAa;EAC/B;EACA;EACA;EACA;EACA;EACA;EACAC,cAAc,EAAEA,CAACX,IAAI,EAAEY,IAAI,EAAEC,OAAO,kBAAAT,MAAA,CAAkBjB,KAAK,CAACa,IAAI,CAAC,QAAAI,MAAA,CAAKQ,IAAI,KAAK,IAAI,GAAG,sBAAsB,0BAAAR,MAAA,CAA0BS,OAAO,CAACC,MAAM,CAACF,IAAI,EAAE,UAAU,CAAC,CAAE,CAAE;EAC1KG,oBAAoB,EAAE3B,KAAK,OAAAgB,MAAA,CAAOhB,KAAK,YAAS;EAChD4B,sBAAsB,EAAE3B,OAAO,OAAAe,MAAA,CAAOf,OAAO,aAAU;EACvD4B,sBAAsB,EAAE3B,OAAO,OAAAc,MAAA,CAAOd,OAAO,cAAW;EACxD;EACA4B,sBAAsB,EAAEA,CAACC,QAAQ,EAAEC,KAAK,KAAKD,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,CAAC,sDAAAf,MAAA,CAAgDgB,KAAK,CAACN,MAAM,CAACM,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,EAAE,UAAU,CAAC,IAAK,iBAAiB;EAChNI,sBAAsB,EAAEA,CAACJ,QAAQ,EAAEC,KAAK,KAAKD,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,CAAC,sDAAAf,MAAA,CAAgDgB,KAAK,CAACN,MAAM,CAACM,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,EAAE,UAAU,CAAC,IAAK,iBAAiB;EAChN;EACAK,cAAc,EAAE,kBAAkB;EAClCC,cAAc,EAAE;AAClB,CAAC;AACD,OAAO,MAAMC,IAAI,GAAGxC,sBAAsB,CAACQ,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}